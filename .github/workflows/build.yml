name: Build Cisco Control Center Soap Client

env:
    DevBranch: 1.4.4
    StableBranch: main
    # Note that Is Release also has to be updated at the IF level for a Job. IE both documentation and steam push
    IsRelease: ${{ github.event_name == 'push' && (endsWith(github.ref, 'preview') || endsWith(github.ref, 'main')) }}
    IsVersioned: ${{ github.event_name == 'push' && (endsWith(github.ref, 'preview') || endsWith(github.ref, 'main') || endsWith(github.ref, '1.4.4'))  }}
    ForcedDotnetSdkVersion: 8.0.203

# Controls when the action will run. 
on:
  # This workflow runs when a push to major branch happens, or when a label is added to a pull request targetting major branch.
  push:
    # note these cannot use the env.Branch variables
    branches: [gh_actions_test, main, preview, 1.4.4, feature/dotnet8]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a primary job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Make sure not to run this job on other labels
    if: github.event_name == 'push'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out base branch
        uses: actions/checkout@v2
        with:
          ref: ${{github.ref}}
          persist-credentials: false
          fetch-depth: 0
      
      # Re-calculate the versioning of tModLoader
      - name: Update Versioning
        id: version
        if: env.IsVersioned == 'true'
        shell: bash
        run: |
          echo "Attempting get previous version id"
          version=$(git describe --tags --abbrev=0)
          
          echo "Previous Version is: $version"
          regex="^v([0-9]+).([0-9]+).([0-9]+)?$"
          if [[ $version =~ $regex ]] ; then
            year="${BASH_REMATCH[1]}"
            month="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            oldate="$year.$month"
          else
            echo "Previous version '$version' is not a valid version"
            exit 1
          fi
          
          echo "Checking Version Updates"
          newdt="$(date +%Y.%m)"
          if [[ ! "$oldate" = "$newdt" ]] ; then
            echo "Checking Version Updates for ${{env.StableBranch}}"
            echo "Rolling Forward the Month... from '$oldate' to '$newdt'"
            oldate="$newdt"
            feature=1
            patch=0
          else
            echo "Rolling Forward the Patch #..."
            ((++patch))
          fi
          
          version="$oldate.$patch"
          echo "New version is '$version'"
          echo "new_version=$version" >> $GITHUB_OUTPUT
        env:
          branch: ${{github.ref}}
        
        # Apply new Tag for the current commit
      - uses: mathieudutour/github-tag-action@v6.0
        if: ${{ steps.version.outputs.new_version != null}}
        with:
           custom_tag: ${{ steps.version.outputs.new_version }}
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Add msbuild to path
        uses: microsoft/setup-msbuild@v2
        
      - name: Setup Nuget
        uses: Nuget/setup-nuget@v1.0.5

      - name: Restore nuget packages
        run: nuget restore SoapClientJasperControlCenter.sln

      # Runs a set of commands using the runners shell
      - name: Build script
        run: msbuild SoapClientJasperControlCenter.sln /p:Configuration=Release -v:q
            
      - name: Upload Release Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Release Build
          path: |
            SoapClient/bin/Release/.
            
      - name: List final directory and file structure
        if: always()
        shell: pwsh
        run: tree /f /a
        
      #- name: Post push report to 1-4-nightly-builds on Discord
      #  uses: sarisia/actions-status-discord@v1
      #  if: always() && github.event_name == 'push' && env.RunDiscordHook
      #  with:
      #    webhook: ${{ secrets.DISCORD_WEBHOOK_BUILDBOT }}
      #    description: |
      #      Click [here](https://github.com/tModLoader/tModLoader/actions/runs/${{ github.run_id }}) to view.
        
  deploy:
    needs: build
    # We push a release only on push events to the stable/preview branch that build correctly
    # Note this line doesn't have access to env variable yet since it is before the runner is established
    if: ${{ github.event_name == 'push' && (endsWith(github.ref, 'preview') || endsWith(github.ref, 'stable')) }}
    name: Upload to Releases
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Check out base branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Download build artifact from build job
        uses: actions/download-artifact@v2
        with:
          # Change this next line to switch between uploading Release and Debug if desired. 
          name: Release Build
          path: artifacts/Build
          
      - name: View build artifact files
        run: |
          echo pwd is: ${PWD}
          ls -alhR
        working-directory: artifacts/Build
      
      - name: Get Version tag for Release
        id: version2
        shell: bash
        run: |
          echo "Attempting get current version id"
          version=$(git describe --tags --abbrev=0)
          echo "Current Version is: $version"
          echo "::set-output name=new_version::$version"
        env:
          branch: ${{github.ref}}
          
      # Zip for making a Release Zip
      - name: Install Zip
        if: env.IsRelease == 'true'
        uses: montudor/action-zip@v1
      
      # Zip all files for Releases
      - name: Zip Artifacts
        working-directory: /home/runner/work/Cisco-Control-Center-SOAPClient/Cisco-Control-Center-SOAPClient/artifacts/
        run: |
          cd Build; zip -qq -r ../Cisco-Control-Center-SOAPClient.zip .; cd ..
      
      # Make a Release on Github
      - name: Make a release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "/home/runner/work/Cisco-Control-Center-SOAPClient/Cisco-Control-Center-SOAPClient/artifacts/Cisco-Control-Center-SOAPClient.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          name: "1.4.4-${{github.ref}} Version Update: ${{ steps.version2.outputs.new_version }}"
          body: "Monthly Github Auto-release for ${{github.ref}}"
          tag: ${{ steps.version2.outputs.new_version }}
          prerelease: ${{ contains(github.ref, 'preview') }}
          makeLatest: ${{ contains(github.ref, 'stable') }}
          
